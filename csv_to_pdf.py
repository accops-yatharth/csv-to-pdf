import pandas
import pdfkit
import htmlmin
import os
import datetime
import argparse
MYSTYLE = ""
real_path = os.path.dirname(os.path.realpath(__file__))
print(real_path)
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("csv_path", help="full path to the csv file.")
    parser.add_argument("output_path", help="full output path to the pdf file.")


    args = parser.parse_args()
    if not args.csv_path.lower().endswith("csv"):
        print("Invalid input file. Ensure the file is csv format.")
        return 1

    if not args.output_path.lower().endswith("pdf"):
        print("Invalid output file. Ensure the file is pdf format.")
        return 1
    with open(os.path.join(real_path, 'mystyle.css'), 'r') as f:
        MYSTYLE = f.read()
    
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
    df = pandas.read_csv(args.csv_path)
    html = htmlmin.minify(f"<style>{MYSTYLE}</style><p>Report generated at : {current_time}</p>\
            {df.to_html(classes='mystyle')}<p>Report generated by Accops Reporting Server.</p>")
    pdfkit.from_string(html, args.output_path, options={"quiet": ""})
    return 0


if __name__ == '__main__':
    main()
